# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hello_world/BoundingBoxWithTime.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BoundingBoxWithTime(genpy.Message):
  _md5sum = "c5698bfee7fb49c340d5d5281d1a2cca"
  _type = "hello_world/BoundingBoxWithTime"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 timestamp
int32 x_offset
int32 y_offset
int32 height
int32 width
bool do_rectify
int32 class_id
float32 class_confidence
int32 track_id
"""
  __slots__ = ['timestamp','x_offset','y_offset','height','width','do_rectify','class_id','class_confidence','track_id']
  _slot_types = ['float64','int32','int32','int32','int32','bool','int32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,x_offset,y_offset,height,width,do_rectify,class_id,class_confidence,track_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BoundingBoxWithTime, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.x_offset is None:
        self.x_offset = 0
      if self.y_offset is None:
        self.y_offset = 0
      if self.height is None:
        self.height = 0
      if self.width is None:
        self.width = 0
      if self.do_rectify is None:
        self.do_rectify = False
      if self.class_id is None:
        self.class_id = 0
      if self.class_confidence is None:
        self.class_confidence = 0.
      if self.track_id is None:
        self.track_id = 0
    else:
      self.timestamp = 0.
      self.x_offset = 0
      self.y_offset = 0
      self.height = 0
      self.width = 0
      self.do_rectify = False
      self.class_id = 0
      self.class_confidence = 0.
      self.track_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_d4iBifi().pack(_x.timestamp, _x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify, _x.class_id, _x.class_confidence, _x.track_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 37
      (_x.timestamp, _x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify, _x.class_id, _x.class_confidence, _x.track_id,) = _get_struct_d4iBifi().unpack(str[start:end])
      self.do_rectify = bool(self.do_rectify)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_d4iBifi().pack(_x.timestamp, _x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify, _x.class_id, _x.class_confidence, _x.track_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 37
      (_x.timestamp, _x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify, _x.class_id, _x.class_confidence, _x.track_id,) = _get_struct_d4iBifi().unpack(str[start:end])
      self.do_rectify = bool(self.do_rectify)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d4iBifi = None
def _get_struct_d4iBifi():
    global _struct_d4iBifi
    if _struct_d4iBifi is None:
        _struct_d4iBifi = struct.Struct("<d4iBifi")
    return _struct_d4iBifi
