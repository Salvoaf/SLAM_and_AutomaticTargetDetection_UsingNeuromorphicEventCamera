// Generated by gencpp from file hello_world/BoundingBoxWithTime.msg
// DO NOT EDIT!


#ifndef HELLO_WORLD_MESSAGE_BOUNDINGBOXWITHTIME_H
#define HELLO_WORLD_MESSAGE_BOUNDINGBOXWITHTIME_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hello_world
{
template <class ContainerAllocator>
struct BoundingBoxWithTime_
{
  typedef BoundingBoxWithTime_<ContainerAllocator> Type;

  BoundingBoxWithTime_()
    : timestamp(0.0)
    , x_offset(0)
    , y_offset(0)
    , height(0)
    , width(0)
    , do_rectify(false)
    , class_id(0)
    , class_confidence(0.0)
    , track_id(0)  {
    }
  BoundingBoxWithTime_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , x_offset(0)
    , y_offset(0)
    , height(0)
    , width(0)
    , do_rectify(false)
    , class_id(0)
    , class_confidence(0.0)
    , track_id(0)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef int32_t _x_offset_type;
  _x_offset_type x_offset;

   typedef int32_t _y_offset_type;
  _y_offset_type y_offset;

   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _width_type;
  _width_type width;

   typedef uint8_t _do_rectify_type;
  _do_rectify_type do_rectify;

   typedef int32_t _class_id_type;
  _class_id_type class_id;

   typedef float _class_confidence_type;
  _class_confidence_type class_confidence;

   typedef int32_t _track_id_type;
  _track_id_type track_id;





  typedef boost::shared_ptr< ::hello_world::BoundingBoxWithTime_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hello_world::BoundingBoxWithTime_<ContainerAllocator> const> ConstPtr;

}; // struct BoundingBoxWithTime_

typedef ::hello_world::BoundingBoxWithTime_<std::allocator<void> > BoundingBoxWithTime;

typedef boost::shared_ptr< ::hello_world::BoundingBoxWithTime > BoundingBoxWithTimePtr;
typedef boost::shared_ptr< ::hello_world::BoundingBoxWithTime const> BoundingBoxWithTimeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hello_world::BoundingBoxWithTime_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hello_world::BoundingBoxWithTime_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hello_world::BoundingBoxWithTime_<ContainerAllocator1> & lhs, const ::hello_world::BoundingBoxWithTime_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.x_offset == rhs.x_offset &&
    lhs.y_offset == rhs.y_offset &&
    lhs.height == rhs.height &&
    lhs.width == rhs.width &&
    lhs.do_rectify == rhs.do_rectify &&
    lhs.class_id == rhs.class_id &&
    lhs.class_confidence == rhs.class_confidence &&
    lhs.track_id == rhs.track_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hello_world::BoundingBoxWithTime_<ContainerAllocator1> & lhs, const ::hello_world::BoundingBoxWithTime_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hello_world

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hello_world::BoundingBoxWithTime_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hello_world::BoundingBoxWithTime_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hello_world::BoundingBoxWithTime_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hello_world::BoundingBoxWithTime_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello_world::BoundingBoxWithTime_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello_world::BoundingBoxWithTime_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hello_world::BoundingBoxWithTime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5698bfee7fb49c340d5d5281d1a2cca";
  }

  static const char* value(const ::hello_world::BoundingBoxWithTime_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5698bfee7fb49c3ULL;
  static const uint64_t static_value2 = 0x40d5d5281d1a2ccaULL;
};

template<class ContainerAllocator>
struct DataType< ::hello_world::BoundingBoxWithTime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hello_world/BoundingBoxWithTime";
  }

  static const char* value(const ::hello_world::BoundingBoxWithTime_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hello_world::BoundingBoxWithTime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 timestamp\n"
"int32 x_offset\n"
"int32 y_offset\n"
"int32 height\n"
"int32 width\n"
"bool do_rectify\n"
"int32 class_id\n"
"float32 class_confidence\n"
"int32 track_id\n"
;
  }

  static const char* value(const ::hello_world::BoundingBoxWithTime_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hello_world::BoundingBoxWithTime_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.x_offset);
      stream.next(m.y_offset);
      stream.next(m.height);
      stream.next(m.width);
      stream.next(m.do_rectify);
      stream.next(m.class_id);
      stream.next(m.class_confidence);
      stream.next(m.track_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoundingBoxWithTime_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hello_world::BoundingBoxWithTime_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hello_world::BoundingBoxWithTime_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "x_offset: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x_offset);
    s << indent << "y_offset: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y_offset);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "do_rectify: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.do_rectify);
    s << indent << "class_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.class_id);
    s << indent << "class_confidence: ";
    Printer<float>::stream(s, indent + "  ", v.class_confidence);
    s << indent << "track_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.track_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HELLO_WORLD_MESSAGE_BOUNDINGBOXWITHTIME_H
